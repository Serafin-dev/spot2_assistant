# GNU make configuration file.
# https://www.gnu.org/software/make/manual/make.html

.PHONY: requirements upgrade clean help test quality validate selfcheck
.DEFAULT_GOAL := help

PIP_COMPILE = pip-compile --upgrade

help: ## Display help message.
	@echo "Please use \`make <target>\` where <target> is one of"
	@awk -F ':.*?## ' '/^[a-zA-Z]/ && NF==2 {printf "\033[36m  %-25s\033[0m %s\n", $$1, $$2}' $(MAKEFILE_LIST) | sort

clean: ## Remove generated byte code and build artifacts.
	find . -name '__pycache__' -exec rm -rf {} +
	find . -name '*.pyc' -exec rm -f {} +
	find . -name '*.pyo' -exec rm -f {} +
	find . -name '*~' -exec rm -f {} +
	rm -fr .*_cache

upgrade: ## Update requirements.
	pip install -qr requirements/pip-tools.in
	$(PIP_COMPILE) -o requirements/pip-tools.txt requirements/pip-tools.in
	$(PIP_COMPILE) -o requirements/base.txt requirements/base.in
	$(PIP_COMPILE) -o requirements/test.txt requirements/test.in
	$(PIP_COMPILE) -o requirements/quality.txt requirements/quality.in
	$(PIP_COMPILE) -o requirements/dev.txt requirements/dev.in

requirements: ## Install development requirements.
	pip install -r requirements/dev.txt

test: ## Run tests.
	pytest app

quality: ## Run quality check.
	pylint app frontend
	isort --check-only --diff app frontend
	black --check app frontend
	mypy app frontend
	flake8 app frontend

validate: ## Run quality check and tests.
	$(MAKE) quality
	$(MAKE) test

selfcheck: ## Check that the Makefile is well-formed.
	@echo 'The Makefile is well-formed.'

build: ## Build Docker image.
	docker build -t spot2-assistant .

run-container: ## Run container with the application.
	docker run -p 8501:8501 -e GOOGLE_API_KEY=${GOOGLE_API_KEY} spot2-assistant

run: ## Start the streamlit server.
	python -m streamlit run frontend/app.py
